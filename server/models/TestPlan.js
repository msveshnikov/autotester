import mongoose from 'mongoose';

// Define the schema for a single test step within a test case
const TestStepSchema = new mongoose.Schema(
    {
        action: {
            type: String,
            required: true,
            trim: true
            // Common actions might include: 'navigate', 'click', 'type', 'assert', 'wait'
            // Consider adding an enum here for validation if actions are predefined.
            // enum: ['navigate', 'click', 'type', 'assert', 'wait']
        },
        selector: {
            type: String, // CSS selector, XPath, or other element locator
            trim: true
        },
        value: {
            type: String, // Text to type, value to set, etc.
            trim: true
        },
        expected: {
            type: String, // Expected value or state for assertions
            trim: true
        }
        // Additional fields for specific actions could be added here, e.g.:
        // url: { type: String, trim: true }, // For 'navigate' action
        // duration: { type: Number } // For 'wait' action in milliseconds
    },
    { _id: false }
); // Steps are typically embedded and don't need their own _id

// Define the schema for the content of a single test case generated by the AI.
// The AI output is an array of objects like this.
const AiTestCaseContentSchema = new mongoose.Schema(
    {
        name: {
            type: String,
            required: true,
            trim: true
        },
        description: {
            type: String,
            trim: true
        },
        steps: {
            type: [TestStepSchema], // Array of steps within this test case
            default: []
        }
    },
    { _id: false }
); // Individual test case structures are embedded subdocuments

// Define the main schema for the TestPlan model.
// This model represents a saved test plan document generated by the AI
// for a specific documentation link and application URL.
const TestPlanSchema = new mongoose.Schema(
    {
        userId: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User', // Link to the User model
            required: true
        },
        docLink: {
            type: String, // Link to the documentation source (JIRA, Confluence, etc.)
            trim: true
        },
        appUrl: {
            type: String, // The URL of the web application being tested
            required: true,
            trim: true
        },
        modelUsed: {
            type: String, // The AI model used for generation (e.g., 'gemini-pro')
            trim: true
        },
        plan: {
            type: [AiTestCaseContentSchema], // Array containing the AI-generated test case structures
            default: []
        },
        isPrivate: {
            // Field used in the admin panel for presentations/test plans
            type: Boolean,
            default: true
        },
        createdAt: {
            type: Date,
            default: Date.now
        },
        updatedAt: {
            type: Date,
            default: Date.now
        }
    },
    {
        timestamps: false // We handle updatedAt manually
    }
);

// Add indexes for efficient querying
TestPlanSchema.index({ userId: 1, createdAt: -1 });
TestPlanSchema.index({ appUrl: 1, createdAt: -1 });

// Middleware to update the 'updatedAt' field on save
TestPlanSchema.pre('save', function (next) {
    this.updatedAt = Date.now();
    next();
});

// Create and export the TestPlan model
const TestPlan = mongoose.model('TestPlan', TestPlanSchema);

export default TestPlan;
